class 学生 {
    String 名前;
    int 学年;

    void 紹介() {
        System.out.println("私の名前は" + 名前 + "です。");
        System.out.println("私は" + 学年 + "年生です。");
    }
}

// 学生 を継承したサブクラスの例（フィールドをシャドウして super.フィールド を参照）
class 大学生 extends 学生 {
    // スーパークラスと同名のフィールドを定義（シャドウイング）
    String 名前; 
    String 専攻;
    int 年齢;

    @Override
    void 紹介() {
        // スーパークラスの紹介メソッドを呼ぶ（superを使う例）
        super.紹介();
        System.out.println("（サブクラスで上書き）専攻は" + 専攻 + "です。");
        System.out.println("（サブクラスで上書き）年齢は" + 年齢 + "歳です。");
    }

    // スーパークラスのフィールドとサブクラスのフィールド両方を表示する例
    void showNames() {
        System.out.println("super.名前 = " + super.名前); // スーパークラスの名前
        System.out.println("this.名前  = " + this.名前);  // サブクラスの名前（シャドウされたもの）
    }

    void 卒業要件確認() {
        System.out.println("卒業要件を確認します（ダミー実装）。");
    }
}

public class Hello {
    public static void main(String[] args) {
        学生 s = new 学生();
        s.名前 = "太郎（学生）";
        s.学年 = 3;
        s.紹介();

        System.out.println("---");

        大学生 u = new 大学生();
        // スーパークラス側のフィールドに値を入れるにはキャストして代入するか、super経由でセットするメソッドを作る必要がある。
        ((学生)u).名前 = "太郎（親クラスの名前）"; // スーパークラスの名前フィールドに代入
        u.名前 = "花子（サブクラスの名前）";         // サブクラス側の名前フィールドに代入
        ((学生)u).学年 = 4;
        u.専攻 = "情報工学";
        u.年齢 = 22;

        // スーパークラスのフィールドとサブクラスのフィールドを比較表示
        u.showNames();

        System.out.println("---");

        // オーバーライドしたメソッド内で super.紹介() を呼ぶ例（上で定義済み）
        u.紹介();

        System.out.println("--- ポリモーフィズムの例 ---");

        学生 p = new 大学生();
        ((学生)p).名前 = "次郎（親クラスの名前）";
        ((大学生)p).名前 = "次郎（サブクラスの名前）";
        ((学生)p).学年 = 2;
        ((大学生)p).専攻 = "経済学";
        ((大学生)p).年齢 = 21;
        p.紹介(); // 大学生 の紹介が呼ばれる（オーバーライド）
    }
}
